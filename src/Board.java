import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

/**
 * The chess board. Contains a 2D array of pieces.
 */
public class Board extends JPanel {

    private Piece[][] pieces;
    private JButton[][] boardButtons;

    /**
     * Default constructor, just instantiates the array.
     * Call fillBoard() to fill the board with pieces in their starting positions
     * This takes heavy inspiration from https://stackoverflow.com/a/21096455
     */
    public Board () {
        super(new GridLayout(0, 9));
        setBorder(new LineBorder(Color.BLACK));

        Insets buttonMargin = new Insets(0,0,0,0);
        pieces = new Piece[8][8];
        boardButtons = new JButton[8][8];

        // Create all the buttons
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                JButton button = new JButton();
                button.setMargin(buttonMargin);
                // Just an empty icon
                ImageIcon icon = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
                button.setIcon(icon);

                // Color every other button black
                if ((x % 2 == 1 && y % 2 == 1) || (y % 2 == 0 && x % 2 == 0)) {
                    button.setBackground(Color.WHITE);
                } else {
                    button.setBackground(Color.BLACK);
                }
                boardButtons[x][y] = button;
            }
        }

        // Just adds a blank space to align the other labels
        add(new JLabel(""));

        // Create column labels
        for (int x = 0; x < 8; x++) {
            add(new JLabel("ABCDEFGH".substring(x, x + 1), SwingConstants.CENTER));
        }


        // Create row labels
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                if (y == 0) {
                    add(new JLabel("" + (x + 1), SwingConstants.CENTER));
                }
                add(boardButtons[x][y]);
            }
        }
    }

    /**
     * Creates the pieces on the board
     */
    public void fillBoard() {
        // Create pawns
        for (int i = 0; i < 8; i++) {
            pieces[1][i] = new Pawn(new Position( 1, i), Piece.GOLD);
            pieces[6][i] = new Pawn(new Position( 6, i), Piece.SILVER);
        }
    }

    /**
     * Moves a piece
     * @param move The move
     */
    public void movePiece(Move move) {
        move.getPiece().isMoveValid(this, move);
    }

    /**
     * This will look through the current board, find all the pieces, and reset their positions to
     * whatever they have as their position variable.
     * Call this method AFTER changing a Piece object's position.
     * @param piecesList The list of pieces generated by getListOfPieces()
     */
    public void updateBoard(List<Piece> piecesList) {
        // Nuke the (2d) pieces array
        pieces = new Piece[8][8];

        // Add the pieces back into the pieces 2d array
        for (Piece piece : piecesList) {
            pieces[piece.getPosition().getXPosAsInt()][piece.getPosition().getyPos()] = piece;
        }
    }

    /**
     * Draws the board. Should be called after updateBoard().
     */
    public void drawBoard() {
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                JButton button = boardButtons[x][y];
                Piece piece = pieces[x][y];

                if (piece instanceof Pawn) {
                    if (piece.getColor() == Piece.GOLD) button.setIcon(new ImageIcon(ChessSprites.GOLD_PAWN));
                    if (piece.getColor() == Piece.SILVER) button.setIcon(new ImageIcon(ChessSprites.SILVER_PAWN));
                }
            }
        }
        repaint();
    }

    /**
     * Returns the 2D array of pieces. I can't think of when this would need to be used, but it's here anyway.
     * @return The 2D array of pieces
     */
    public Piece[][] getPieces() {
        return pieces;
    }

    /**
     * Gets the piece at a given position
     * @param position The position to get the piece from
     * @return The piece at position
     */
    public Piece getPieceAt(Position position) {
        return pieces[position.getXPosAsInt()][position.getyPos()];
    }

    @Override
    public String toString() {
        String ret = "";
        ret += "Board:\n";
        for (int x = 0; x < 8; x++) {
            ret += "-----------------\n";
            for (int y = 0; y < 8; y++) {
                ret += "|";
                if (pieces[x][y] instanceof Pawn) {
                    ret += "P";
                }
                else {
                    ret += " ";
                }
            }
            ret += "|\n";
        }
        return ret;
    }
}
